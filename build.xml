<project name="sdciplusreader"
         default="dist"
         basedir=".">
  <description>Application for reading SDCI+ files.</description>


  <!-- ==================================================================
      GLOBAL BUILD PROPERTIES
  =================================================================== -->

  <property name="src.dir" value="src" />
  <property name="java.dir" value="${src.dir}/java" />
  <property name="build.dir" value="build"/>
  <property name="classes.dir" value="${build.dir}/classes" />
  <property name="lib.dir" value="lib"/>
  <property name="docs.dir" value="docs"/>
  <property name="coverage.dir" value="${docs.dir}/coverage" />
  <property name="test-results.dir" value="${docs.dir}/test-results" />
  <property name="temp.dir" value="temp" />
  <property name="lib.dir" location="./lib"/>
  <property name="dist.dir" location="./dist"/>

  <!-- Classpath for compilation and tests. -->
  <path id="base.path">
    <fileset dir="${lib.dir}" includes="**/*.jar" />
  </path>

  <!-- ==================================================================
      TARGETS FOR BUILDING THE SOFTWARE
  =================================================================== -->

  <!-- Builds everything from scratch. -->
  <target name="all" depends="clean, dist" description="Builds everything, excluding docs, from scratch."/>


  <!-- Deletes all directories and files created by the build process. -->
  <target name="clean" description="Remove all files created by the build process." >
    <delete dir="${build.dir}" />
    <delete dir="${dist.dir}" />
    <delete dir="${docs.dir}" />
    <delete dir="${temp.dir}" />
  </target>


  <!-- Build all Java code. -->
  <target name="compile" description="Compile the source." >
    <!-- Main classes. -->
    <mkdir dir="${classes.dir}/main" />
    <javac destdir="${classes.dir}/main"
           debug="on"
           deprecation="on"
           optimize="on"
           source="1.5"
           target="1.5"
           srcdir="${java.dir}/main"
           classpathref="base.path">
      <compilerarg value="-Xlint:unchecked" />
    </javac>
    <!-- Test classes. -->
    <mkdir dir="${classes.dir}/test" />
    <javac destdir="${classes.dir}/test"
           debug="on"
           deprecation="on"
           optimize="on"
           source="1.5"
           target="1.5"
           srcdir="${java.dir}/test">
      <classpath>
        <path refid="base.path" />
        <path location="${classes.dir}/main" />
      </classpath>
      <compilerarg value="-Xlint:unchecked" />
    </javac>
  </target>


  <!-- Build application JAR files. -->
  <target name="jar" depends="compile" description="Create the application JAR files.">
      <jar destfile="${build.dir}/sdciplusreader.jar">
        <fileset dir="${classes.dir}/main"/>
        <manifest>
          <attribute name="Class-Path" value="antlr-runtime-3.1.3.jar"/>
          <attribute name="Main-Class" value="net.assertis.shiftviewer.ShiftViewer"/>
        </manifest>
      </jar>
  </target>


  <!-- Copy all necessary files to deployment directory. -->
  <target name="dist" depends="jar" description="Generate the deployment tree." >
    <mkdir dir="${dist.dir}" />
    <!-- Deploy all application JARs, libraries and config files. -->
    <copy todir="${dist.dir}" flatten="true">
      <fileset dir="${build.dir}" includes="**/*.jar" />
      <fileset dir="${lib.dir}/runtime" includes="**/*.jar,**/*.dll,**/*.so" />
    </copy>
  </target>


  <!-- Runs the unit tests. -->
  <target name="test" depends="clean, jar" description="Run unit tests.">
    <!-- Don't run FEST tests in a headless environment (they will fail) -->
    <condition property="tests.file" value="testng-headless.xml" else="testng.xml">
      <isset property="headless" />
    </condition>

    <mkdir dir="${temp.dir}/originals" />

    <path id="test.path">
      <dirset dir="." includes="**/${classes.dir}/test" />
      <fileset dir="${temp.dir}" includes="*.jar"/>
      <fileset dir="." includes="${lib.dir}/*.jar"/>
      <path refid="base.path" />
    </path>

    <taskdef resource="tasks.properties" classpathref="test.path" />
    <taskdef resource="testngtasks" classpathref="test.path"/>

    <!-- Bytecode instrumentation to enable collection of test coverage data. -->
    <copy todir="${temp.dir}/originals" flatten="true">
      <fileset dir="." includes="${build.dir}/*.jar" />
    </copy>
    <cobertura-instrument todir="${temp.dir}" datafile="${temp.dir}/cobertura.ser">
      <fileset dir="${temp.dir}/originals" includes="*.jar"/>
    </cobertura-instrument>

    <!-- Run the unit tests on the instrumented classes. -->
    <mkdir dir="${test-results.dir}" />

    <testng classpathref="test.path"
            outputdir="${test-results.dir}"
            haltonfailure="false"
            useDefaultListeners="false"
            listeners="org.uncommons.reportng.HTMLReporter,org.uncommons.reportng.JUnitXMLReporter">
      <xmlfileset dir="." includes="${tests.file}"/>
      <sysproperty key="java.awt.headless" value="${headless}" />
      <sysproperty key="net.sourceforge.cobertura.datafile" file="${temp.dir}/cobertura.ser" />
      <sysproperty key="org.uncommons.reportng.title" value="SDCI+ Reader Unit Test Report" />
      <sysproperty key="org.uncommons.reportng.coverage-report" value="../../coverage/index.html" />
    </testng>
    <delete file="velocity.log" />

    <!-- Generate the HTML coverage report. -->
    <mkdir dir="${coverage.dir}" />
    <cobertura-report format="html"
                      destdir="${coverage.dir}"
                      datafile="${temp.dir}/cobertura.ser">
      <dirset dir="." includes="${java.dir}/main" />
    </cobertura-report>
    <!-- Generate an XML coverage report so that Hudson can graph trends. -->
    <cobertura-report format="xml"
                      destdir="${coverage.dir}"
                      datafile="${temp.dir}/cobertura.ser">
      <dirset dir="." includes="${java.dir}/main" />
    </cobertura-report>

    <delete dir="${temp.dir}" />
  </target>

</project>
